import time
import sys
from pathlib import Path
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (
    TimeoutException, StaleElementReferenceException, ElementClickInterceptedException
)

# ======================= –ù–ê–°–¢–†–û–ô–ö–ò =======================
RESULTS_FILE = Path("test_results.xlsx")
CHROMEDRIVER_PATH = None
HEADLESS = False
PASSWORD = "Aa123456"
BASE_DOWNLOAD_DIR = Path("downloads")
DELAY = 0.4

LOGIN_URL = "https://amlacademy.kz/finiq/login"
DASHBOARD_URL = "https://amlacademy.kz/finiq/dashboard"

SHORT_WAIT = 6
MID_WAIT = 8
DL_WAIT = 35
# =========================================================


# ---------------- –ù–ê–°–¢–†–û–ô–ö–ê –î–†–ê–ô–í–ï–†–ê ----------------
def start_driver(driver_path=None, headless=False):
    options = webdriver.ChromeOptions()
    prefs = {
        "download.prompt_for_download": False,
        "plugins.always_open_pdf_externally": True
    }
    options.add_experimental_option("prefs", prefs)
    if headless:
        options.add_argument("--headless=new")
        options.add_argument("--window-size=1280,900")
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--lang=ru")
    driver = webdriver.Chrome(executable_path=driver_path, options=options) if driver_path else webdriver.Chrome(options=options)
    driver.implicitly_wait(3)
    return driver


def set_download_dir(driver, directory: Path):
    directory.mkdir(parents=True, exist_ok=True)
    dl = str(directory.resolve())
    try:
        driver.execute_cdp_cmd("Page.setDownloadBehavior", {"behavior": "allow", "downloadPath": dl})
    except Exception:
        try:
            driver.execute_cdp_cmd("Browser.setDownloadBehavior", {"behavior": "allow", "downloadPath": dl})
        except Exception:
            pass


# ---------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ----------------
def safe_click(driver, xpath, wait=SHORT_WAIT):
    try:
        el = WebDriverWait(driver, wait).until(EC.element_to_be_clickable((By.XPATH, xpath)))
        driver.execute_script("arguments[0].scrollIntoView({block:'center'});", el)
        driver.execute_script("arguments[0].click();", el)
        return True
    except Exception:
        return False


def login(driver, email, password):
    try:
        driver.get(LOGIN_URL)
        WebDriverWait(driver, MID_WAIT).until(EC.presence_of_element_located((By.XPATH, "//input[@type='email']")))
        driver.find_element(By.XPATH, "//input[@type='email']").send_keys(email)
        driver.find_element(By.XPATH, "//input[@type='password']").send_keys(password)
        safe_click(driver, "//button[contains(., '–í–æ–π—Ç–∏')]", wait=SHORT_WAIT)
        WebDriverWait(driver, MID_WAIT).until(lambda d: DASHBOARD_URL in d.current_url)
        print(f"‚úÖ {email} –≤–æ—à—ë–ª")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ {email}: {e}")
        return False


def open_results_page(driver):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç '–ú–æ–∏ —Ç–µ—Å—Ç—ã' -> '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'."""
    try:
        safe_click(driver, "//button[contains(., '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∞–º')]", wait=MID_WAIT)
        safe_click(driver, "//button[contains(., '–ú–æ–∏ —Ç–µ—Å—Ç—ã')]", wait=MID_WAIT)

        res_btn = WebDriverWait(driver, MID_WAIT).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')]"))
        )
        driver.execute_script("arguments[0].click();", res_btn)
        WebDriverWait(driver, MID_WAIT).until(lambda d: "test-results" in d.current_url)
        print("üìÑ –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")
        return False


# ---------------- –°–ö–ê–ß–ò–í–ê–ù–ò–ï ----------------
def _wait_new_pdf(save_dir: Path, before_set: set, timeout: int = DL_WAIT):
    """–ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –†–û–í–ù–û –æ–¥–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ pdf (–±–µ–∑ .crdownload)."""
    end = time.time() + timeout
    while time.time() < end:
        current = set(save_dir.glob("*.pdf"))
        diff = current - before_set
        if diff:
            # –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            candidate = max(diff, key=lambda p: p.stat().st_mtime)
            # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–Ω–µ—Ç .crdownload)
            if not candidate.with_suffix(candidate.suffix + ".crdownload").exists():
                return candidate
        time.sleep(0.4)
    return None


def click_get_and_download(driver, label_text: str, save_dir: Path, target_name: str):
    final_path = save_dir / target_name
    if final_path.exists() and final_path.stat().st_size > 0:
        print(f"‚úÖ –£–∂–µ –µ—Å—Ç—å: {final_path.name} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é")
        return

    before = set(save_dir.glob("*.pdf"))

    try:
        # 1Ô∏è‚É£ –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä-—è—á–µ–π–∫—É —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        container_xpath = f"//div[contains(@class,'MuiGrid-item')][.//p[contains(normalize-space(.), '{label_text}')]]"
        container = WebDriverWait(driver, MID_WAIT).until(
            EC.presence_of_element_located((By.XPATH, container_xpath))
        )

        # 2Ô∏è‚É£ –ù–∞–∂–∏–º–∞–µ–º '–ü–æ–ª—É—á–∏—Ç—å' –µ—Å–ª–∏ –µ—Å—Ç—å
        get_btn_xpath = ".//button[contains(normalize-space(.), '–ü–æ–ª—É—á–∏—Ç—å')]"
        dl_btn_xpath  = ".//button[contains(normalize-space(.), '–°–∫–∞—á–∞—Ç—å')]"

        get_btns = container.find_elements(By.XPATH, get_btn_xpath)
        if get_btns:
            btn_get = get_btns[0]
            driver.execute_script("arguments[0].scrollIntoView({block:'center'});", btn_get)
            time.sleep(0.3)
            try:
                btn_get.click()
            except Exception:
                driver.execute_script("arguments[0].click();", btn_get)
            print(f"üü¢ –ù–∞–∂–∞–ª '–ü–æ–ª—É—á–∏—Ç—å' –¥–ª—è: {label_text}")
        else:
            print(f"‚ÑπÔ∏è '–ü–æ–ª—É—á–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –Ω–∞–∂–∞—Ç–∞) –¥–ª—è: {label_text}")

        # 3Ô∏è‚É£ –ñ–¥—ë–º –∑–∞–º–µ–Ω—É –Ω–∞ '–°–∫–∞—á–∞—Ç—å'
        btn_dl = None
        for _ in range(40):  # ~20 —Å–µ–∫
            try:
                container = driver.find_element(By.XPATH, container_xpath)
                btns = container.find_elements(By.XPATH, dl_btn_xpath)
                if btns:
                    btn_dl = btns[0]
                    if btn_dl.is_enabled():
                        break
            except Exception:
                pass
            time.sleep(0.5)

        if not btn_dl:
            print(f"‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª—Å—è –∫–Ω–æ–ø–∫–∏ '–°–∫–∞—á–∞—Ç—å' –¥–ª—è: {label_text}")
            return

        # 4Ô∏è‚É£ –ù–∞–∂–∏–º–∞–µ–º '–°–∫–∞—á–∞—Ç—å'
        driver.execute_script("arguments[0].scrollIntoView({block:'center'});", btn_dl)
        time.sleep(0.5)
        try:
            btn_dl.click()
        except Exception:
            driver.execute_script("arguments[0].click();", btn_dl)
        print(f"‚¨áÔ∏è –ù–∞–∂–∞–ª '–°–∫–∞—á–∞—Ç—å' –¥–ª—è: {label_text}")

        # 5Ô∏è‚É£ –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        new_file = _wait_new_pdf(save_dir, before, timeout=DL_WAIT)
        if new_file:
            if final_path.exists() and final_path.stat().st_size == 0:
                final_path.unlink(missing_ok=True)
            new_file.rename(final_path)
            print(f"üìÑ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª: {final_path.name}")
        else:
            print(f"‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ PDF –¥–ª—è: {label_text}")

    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {label_text}: {e}")





def download_certificates(driver, user_dir: Path) -> str:
    set_download_dir(driver, user_dir)
    try:
        WebDriverWait(driver, MID_WAIT).until(
            EC.presence_of_element_located((By.XPATH, "//p[contains(text(), '–¥–æ—Å—Ç—É–ø–µ–Ω')]"))
        )
        print("üìú –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    except TimeoutException:
        print("‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return "N/A"

    # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –¥–∏–ø–ª–æ–º, –ø–æ—Ç–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (—Ñ–∏–∫—Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º—ë–Ω)
    click_get_and_download(driver, "–î–∏–ø–ª–æ–º –¥–æ—Å—Ç—É–ø–µ–Ω", user_dir, "–î–∏–ø–ª–æ–º.pdf")
    click_get_and_download(driver, "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω", user_dir, "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.pdf")

    # –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        score_el = WebDriverWait(driver, SHORT_WAIT).until(
            EC.presence_of_element_located((By.XPATH, "//h2[contains(text(), '%')]"))
        )
        return score_el.text.strip()
    except Exception:
        return "N/A"


# ---------------- –í–´–•–û–î ----------------
def logout(driver):
    """
    –ë—ã—Å—Ç—Ä—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π –≤—ã—Ö–æ–¥:
    1) –≤—Å–µ–≥–¥–∞ —É—Ö–æ–¥–∏–º –Ω–∞ DASHBOARD_URL;
    2) –ø—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å '–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' –∫–æ—Ä–æ—Ç–∫–∏–º –æ–∂–∏–¥–∞–Ω–∏–µ–º;
    3) –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–¥—ë–º –Ω–∞ LOGIN_URL (—ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –Ω–∞—à–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞).
    """
    try:
        driver.get(DASHBOARD_URL)
        # –ø—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä–æ –∫–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É
        if safe_click(driver, "//button[contains(., '–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')]", wait=SHORT_WAIT):
            try:
                WebDriverWait(driver, SHORT_WAIT).until(lambda d: "login" in d.current_url)
                print("‚úÖ –í—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ (—á–µ—Ä–µ–∑ Dashboard)\n")
                return
            except TimeoutException:
                pass
        # fallback ‚Äî –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ –ª–æ–≥–∏–Ω
        driver.get(LOGIN_URL)
        WebDriverWait(driver, SHORT_WAIT).until(EC.presence_of_element_located((By.XPATH, "//input[@type='email']")))
        print("‚úÖ –í—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ (—á–µ—Ä–µ–∑ Login)\n")
    except Exception:
        # –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ª–æ–≥–∏–Ω
        try:
            driver.get(LOGIN_URL)
            print("‚úÖ –í—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ —á–µ—Ä–µ–∑ Login)\n")
        except Exception:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏, –ø—Ä–æ–¥–æ–ª–∂–∞—é...\n")


# ---------------- MAIN ----------------
def main():
    if not RESULTS_FILE.exists():
        print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ test_results.xlsx ‚Äî —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–ø—Ç.")
        sys.exit(1)

    df = pd.read_excel(RESULTS_FILE, engine="openpyxl", dtype=str).fillna("")
    driver = start_driver(CHROMEDRIVER_PATH, headless=HEADLESS)

    new_results = []

    for _, row in df.iterrows():
        status = row.get("Status", "")
        email = row.get("Email", "")
        full_name = row.get("FullName", "")
        iin = row.get("IIN", "")

        if status not in ("DONE", "OK"):
            print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é {email} (—Å—Ç–∞—Ç—É—Å {status})")
            new_results.append(row)
            continue

        lastname, firstname = full_name.split(" ", 1) if " " in full_name else (full_name, "")
        user_dir = BASE_DOWNLOAD_DIR / f"{lastname}_{firstname}_{iin}"

        print(f"\n==============================\nüë§ {full_name} ({email})")

        if not login(driver, email, PASSWORD):
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏: {email}")
            new_results.append(row)
            continue

        if open_results_page(driver):
            score = download_certificates(driver, user_dir)
            row["Message"] = "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–∫–∞—á–∞–Ω—ã"
            row["Score"] = score
        else:
            row["Message"] = "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"

        new_results.append(row)

        # –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥
        logout(driver)
        time.sleep(DELAY)

    driver.quit()
    pd.DataFrame(new_results).to_excel(RESULTS_FILE, index=False)
    print("\n‚úÖ –í—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–∫–∞—á–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'downloads'")


if __name__ == "__main__":
    main()

import time
import sys
import re
from pathlib import Path
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

# ======================= –ù–ê–°–¢–†–û–ô–ö–ò =======================
EXCEL_FILE = r"D:\PyCharmProjects\auto_test\1-200-auto-test.xlsx"
CHROMEDRIVER_PATH = None
HEADLESS = False
PASSWORD = "Aa123456"
DELAY = 0.4
RESULTS_FILE = Path("test_results.xlsx")

LOGIN_URL = "https://amlacademy.kz/finiq/login"
DASHBOARD_URL = "https://amlacademy.kz/finiq/dashboard"

# –û—Ç–≤–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö 20 –≤–æ–ø—Ä–æ—Å–æ–≤
ANSWERS = {
    1: "a", 2: "c", 3: "b", 4: "a", 5: "c",
    6: "b", 7: "d", 8: "c", 9: "a", 10: "b",
    11: "c", 12: "a", 13: "a", 14: "b", 15: "a",
    16: "a", 17: "d", 18: "b", 19: "d", 20: "c"
}
# =========================================================


# ---------- –ù–ê–°–¢–†–û–ô–ö–ê –ë–†–ê–£–ó–ï–†–ê ----------
def start_driver(driver_path=None, headless=False):
    options = webdriver.ChromeOptions()
    if headless:
        options.add_argument("--headless=new")
        options.add_argument("--window-size=1280,900")
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--lang=ru")
    driver = webdriver.Chrome(executable_path=driver_path, options=options) if driver_path else webdriver.Chrome(options=options)
    driver.implicitly_wait(3)
    return driver


# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ----------
def safe_click(driver, xpath, wait=5):
    try:
        el = WebDriverWait(driver, wait).until(EC.element_to_be_clickable((By.XPATH, xpath)))
        driver.execute_script("arguments[0].click();", el)
        return True
    except Exception:
        return False


def get_question_number(driver) -> int:
    try:
        h = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//h6[contains(., '–í–æ–ø—Ä–æ—Å')]"))
        )
        m = re.search(r"–í–æ–ø—Ä–æ—Å\s+(\d+)", h.text)
        return int(m.group(1)) if m else 1
    except Exception:
        return 1


def normalize_to_first_question(driver):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ 1 –≤–æ–ø—Ä–æ—Å"""
    try:
        for _ in range(25):
            qn = get_question_number(driver)
            if qn <= 1:
                break
            if not (safe_click(driver, "//button[contains(., '–ù–∞–∑–∞–¥')]", wait=2) or
                    safe_click(driver, "//button[contains(., '–ü—Ä–µ–¥—ã–¥—É—â')]", wait=2)):
                break
            time.sleep(0.4)
    except Exception:
        pass


# ---------- –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–° ----------
def login(driver, email, password):
    driver.get(LOGIN_URL)
    try:
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//input[@type='email']")))
        driver.find_element(By.XPATH, "//input[@type='email']").send_keys(email)
        driver.find_element(By.XPATH, "//input[@type='password']").send_keys(password)
        safe_click(driver, "//button[contains(., '–í–æ–π—Ç–∏')]", wait=6)
        WebDriverWait(driver, 10).until(lambda d: DASHBOARD_URL in d.current_url)
        print(f"‚úÖ {email} –≤–æ—à—ë–ª")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ {email}: {e}")
        return False


def open_tests_page(driver):
    try:
        btn = WebDriverWait(driver, 8).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∞–º')]"))
        )
        driver.execute_script("arguments[0].click();", btn)
        print("‚úÖ –ü–µ—Ä–µ—à—ë–ª –∫ —Ä–∞–∑–¥–µ–ª—É '–¢–µ—Å—Ç—ã'")
        time.sleep(0.8)
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª '–¢–µ—Å—Ç—ã': {e}")
        return False


def check_test_status(driver):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
       done ‚Äî —Ç–µ—Å—Ç —É–∂–µ —Å–¥–∞–Ω
       available ‚Äî —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
       none ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    """
    try:
        open_tests_page(driver)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º "–ú–æ–∏ —Ç–µ—Å—Ç—ã"
        my_tests_tab = WebDriverWait(driver, 6).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., '–ú–æ–∏ —Ç–µ—Å—Ç—ã')]"))
        )
        driver.execute_script("arguments[0].click();", my_tests_tab)
        time.sleep(0.8)

        res_btns = driver.find_elements(By.XPATH, "//button[contains(., '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')]")
        if res_btns:
            print("üìä –ù–∞–π–¥–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —Ç–µ—Å—Ç")
            return "done"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã"
        available_tab = driver.find_element(By.XPATH, "//button[contains(., '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã')]")
        driver.execute_script("arguments[0].click();", available_tab)
        time.sleep(0.5)
        start_btns = driver.find_elements(By.XPATH, "//button[contains(., '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç')]")
        if start_btns:
            print("üü¢ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è")
            driver.execute_script("arguments[0].click();", start_btns[0])
            return "available"

        return "none"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        return "none"


def answer_questions(driver):
    print("üß† –ù–∞—á–∏–Ω–∞—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã...")
    normalize_to_first_question(driver)

    for i in range(1, 21):
        try:
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//h6[contains(., '–í–æ–ø—Ä–æ—Å')]"))
            )
            q_num = get_question_number(driver)
            letter = ANSWERS.get(q_num, "a")

            opts = WebDriverWait(driver, 5).until(
                EC.presence_of_all_elements_located((By.CSS_SELECTOR, "label.MuiFormControlLabel-root p"))
            )

            clicked = False
            for opt in opts:
                if opt.text.strip().lower().startswith(letter):
                    driver.execute_script(
                        "arguments[0].click();", opt.find_element(By.XPATH, "./ancestor::label")
                    )
                    clicked = True
                    break

            if not clicked:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç {letter} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {q_num}")

            if q_num < 20:
                safe_click(driver, "//button[contains(., '–î–∞–ª–µ–µ')]", wait=3)
                try:
                    cancel_btn = WebDriverWait(driver, 1.5).until(
                        EC.element_to_be_clickable((By.XPATH, "//button[contains(., '–û—Ç–º–µ–Ω–∞')]"))
                    )
                    driver.execute_script("arguments[0].click();", cancel_btn)
                except TimeoutException:
                    pass
            else:
                print("üéØ –í—Å–µ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å–µ {i}: {e}")
        time.sleep(0.4)


def finish_test(driver):
    print("üß© –ó–∞–≤–µ—Ä—à–∞—é —Ç–µ—Å—Ç...")
    try:
        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç"
        safe_click(driver, "//button[contains(text(), '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç') or contains(text(), '–ó–∞–≤–µ—Ä—à–∏—Ç—å')]", wait=8)
        time.sleep(1)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        confirm_xpath = "//div[contains(@role, 'dialog')]//button[contains(., '–ó–∞–≤–µ—Ä—à–∏—Ç—å')]"
        confirm_btn = WebDriverWait(driver, 8).until(EC.element_to_be_clickable((By.XPATH, confirm_xpath)))
        driver.execute_script("arguments[0].click();", confirm_btn)
        print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–æ")

        # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "95%")
        el = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//h2[contains(text(), '%')]"))
        )
        score = el.text.strip()
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {score}")

        # ‚ö° –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Dashboard –¥–ª—è –≤—ã—Ö–æ–¥–∞
        driver.get("https://amlacademy.kz/finiq/dashboard")
        time.sleep(0.7)

        return score, True  # test –∑–∞–≤–µ—Ä—à—ë–Ω, –º–æ–∂–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç—å

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        try:
            driver.get("https://amlacademy.kz/finiq/dashboard")
        except Exception:
            pass
        return "N/A", False



def logout(driver):
    """–ù–∞–¥—ë–∂–Ω—ã–π –≤—ã—Ö–æ–¥ —Å—Ä–∞–∑—É —á–µ—Ä–µ–∑ Dashboard"""
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
        driver.get("https://amlacademy.kz/finiq/dashboard")
        print("‚û°Ô∏è –ü–µ—Ä–µ—à—ë–ª –Ω–∞ Dashboard –¥–ª—è –≤—ã—Ö–æ–¥–∞")

        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
        logout_btn = WebDriverWait(driver, 8).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., '–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')]"))
        )

        # –ù–∞–∂–∏–º–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
        driver.execute_script("arguments[0].click();", logout_btn)
        print("üö™ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ—à—ë–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
        WebDriverWait(driver, 6).until(lambda d: "login" in d.current_url)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞\n")

    except TimeoutException:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ login")
        driver.get("https://amlacademy.kz/finiq/login")

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e}")
        driver.get("https://amlacademy.kz/finiq/login")




# ---------- MAIN ----------
def main():
    excel_path = Path(EXCEL_FILE)
    if not excel_path.exists():
        print("‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)

    df = pd.read_excel(excel_path, engine="openpyxl", dtype=str).fillna("")
    completed_emails = set()
    results = []

    if RESULTS_FILE.exists():
        prev = pd.read_excel(RESULTS_FILE, engine="openpyxl", dtype=str).fillna("")
        results = prev.values.tolist()

        # ‚öôÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ —Ä–µ–∞–ª—å–Ω–æ —Å–¥–∞–Ω —Ç–µ—Å—Ç
        completed_emails = set(
            prev.loc[prev["Status"].isin(["DONE", "OK"]), "Email"].tolist()
        )

        print(f"üìÅ –ù–∞–π–¥–µ–Ω –æ—Ç—á—ë—Ç, –ø—Ä–æ–ø—É—â—É {len(completed_emails)} –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

    driver = start_driver(CHROMEDRIVER_PATH, headless=HEADLESS)

    for _, row in df.iterrows():
        email = str(row.get("Email", "")).strip()
        iin = str(row.get("IIN", "")).strip()
        lastname = str(row.get("Lastname", "")).strip()
        firstname = str(row.get("Firstname", "")).strip()
        full_name = f"{lastname} {firstname}"

        if not email or email in completed_emails:
            print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é {email}")
            continue

        print(f"\n==============================\nüë§ {full_name} ({email})")

        # üîÅ –¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫ –≤–æ–π—Ç–∏
        logged_in = False
        for attempt in range(3):
            if login(driver, email, PASSWORD):
                logged_in = True
                break
            else:
                print(f"üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ ({attempt + 1}/3)")
                time.sleep(2)

        if not logged_in:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ {email} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é.")
            row_data = [iin, email, full_name, "FAILED", "N/A", "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞"]
            results.append(row_data)
            pd.DataFrame(results, columns=["IIN", "Email", "FullName", "Status", "Score", "Message"]).to_excel(RESULTS_FILE, index=False)
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç
        status = check_test_status(driver)
        if status == "done":
            row_data = [iin, email, full_name, "DONE", "N/A", "–£–∂–µ —Å–¥–∞–Ω"]

        elif status == "available":
            answer_questions(driver)
            score, finished = finish_test(driver)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
            if finished and score != "N/A":
                row_data = [iin, email, full_name, "OK", score, "–¢–µ—Å—Ç —Å–¥–∞–Ω"]
            else:
                row_data = [iin, email, full_name, "PARTIAL", score, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞"]

        else:
            row_data = [iin, email, full_name, "NONE", "N/A", "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"]

        results.append(row_data)
        pd.DataFrame(results, columns=["IIN", "Email", "FullName", "Status", "Score", "Message"]).to_excel(RESULTS_FILE, index=False)

        # üö™ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        logout(driver)
        time.sleep(DELAY)

    driver.quit()
    print("\n‚úÖ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.xlsx")



if __name__ == "__main__":
    main()

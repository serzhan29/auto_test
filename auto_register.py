import time
import re
import sys
from pathlib import Path
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

# ======================= –ù–ê–°–¢–†–û–ô–ö–ò =======================
EXCEL_FILE = r"D:\PyCharmProjects\auto_test\excel_file\1-200.xlsx"
START_ROW = 2  # —Å –∫–∞–∫–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—Ç—å (1-based)
CHROMEDRIVER_PATH = None  # –∏–ª–∏ —É–∫–∞–∂–∏ –ø—É—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä r"D:\chromedriver.exe"
HEADLESS = False  # True ‚Äî –±–µ–∑ GUI, False ‚Äî —Å –æ–∫–Ω–æ–º
DELAY = 0.4  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏ (—Å–µ–∫)
# =========================================================

BASE = "https://amlacademy.kz"
REG_URL = BASE + "/finiq/registration"
PHONE = "+77777777878"
ORGANIZATION = "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å"
PASSWORD = "Aa123456"
CATEGORY_TEXT = "–í–∑—Ä–æ—Å–ª—ã–π, –°—Ç—É–¥–µ–Ω—Ç"

SELECTORS = {
    "lastname": (By.NAME, "lastname"),
    "firstname": (By.NAME, "firstname"),
    "middlename": (By.NAME, "middlename"),
    "phone": (By.NAME, "phone"),
    "organization": (By.NAME, "organization"),
    "email": (By.NAME, "email"),
    "password": (By.NAME, "password"),
    "confirm": (By.NAME, "confirmPassword"),
    "region_div": (By.ID, "region"),
    "category_div": (By.ID, "category"),
    "submit_btn": (By.XPATH, "//button[contains(., '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è') or @type='submit']"),
}


# =========================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =========================================================
def parse_fio_from_cell(cell_text: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–º–∏–ª–∏—é, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –≥–¥–µ –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å–∫–æ–±–∫–∞—Ö."""
    if not isinstance(cell_text, str):
        cell_text = str(cell_text or "")
    m = re.search(r"\(([^)]+)\)", cell_text)
    if m:
        fio = m.group(1)
    else:
        fio = cell_text
    parts = [p.strip() for p in fio.split() if p.strip()]
    lastname = parts[0] if len(parts) >= 1 else ""
    firstname = parts[1] if len(parts) >= 2 else ""
    middlename = " ".join(parts[2:]) if len(parts) >= 3 else ""
    return lastname, firstname, middlename


def start_driver(driver_path=None, headless=False):
    options = webdriver.ChromeOptions()
    if headless:
        options.add_argument("--headless=new")
        options.add_argument("--window-size=1200,900")
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--lang=ru")
    if driver_path:
        driver = webdriver.Chrome(executable_path=driver_path, options=options)
    else:
        driver = webdriver.Chrome(options=options)
    driver.implicitly_wait(5)
    return driver


def safe_find(driver, by, selector, timeout=6):
    try:
        return WebDriverWait(driver, timeout).until(EC.presence_of_element_located((by, selector)))
    except TimeoutException:
        return None


def select_second_last_option(driver, dropdown_div, wait=6):
    """–í—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¢—É—Ä–∫–µ—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)."""
    driver.execute_script("arguments[0].scrollIntoView(true);", dropdown_div)
    dropdown_div.click()
    time.sleep(0.5)
    try:
        options = WebDriverWait(driver, wait).until(
            EC.presence_of_all_elements_located((By.XPATH, "//li | //div[@role='option']"))
        )
        if len(options) >= 2:
            target = options[-2]
            driver.execute_script("arguments[0].scrollIntoView(true);", target)
            target.click()
            print(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–≥–∏–æ–Ω: {target.text.strip()}")
            return True
        else:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
        return False


def click_option_in_dropdown(driver, dropdown_div, desired_text, wait=4):
    """–ö–ª–∏–∫–∞–µ—Ç –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É."""
    try:
        dropdown_div.click()
    except Exception:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å dropdown"
    xpath_candidates = [
        f"//li[contains(normalize-space(.),'{desired_text}')]",
        f"//div[@role='option' and contains(normalize-space(.),'{desired_text}')]",
        f"//div[contains(normalize-space(.),'{desired_text}')]",
        f"//span[contains(normalize-space(.),'{desired_text}')]",
    ]
    end_time = time.time() + wait
    while time.time() < end_time:
        for xp in xpath_candidates:
            try:
                el = driver.find_element(By.XPATH, xp)
                el.click()
                return True, "ok"
            except Exception:
                pass
        time.sleep(0.2)
    return False, f"–û–ø—Ü–∏—è '{desired_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"


# =========================================================
# –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–°
# =========================================================
def register_one(driver, lastname, firstname, middlename, email):
    driver.get(REG_URL)
    time.sleep(1)

    el = safe_find(driver, *SELECTORS["lastname"])
    if not el:
        return False, "lastname not found"
    el.clear()
    el.send_keys(lastname)

    fn = safe_find(driver, *SELECTORS["firstname"])
    if fn:
        fn.clear()
        fn.send_keys(firstname)

    el = safe_find(driver, *SELECTORS["middlename"])
    if el:
        el.clear()
        el.send_keys(middlename)

    el = safe_find(driver, *SELECTORS["phone"])
    if el:
        el.clear()
        el.send_keys(PHONE)

    el = safe_find(driver, *SELECTORS["organization"])
    if el:
        el.clear()
        el.send_keys(ORGANIZATION)

    el = safe_find(driver, *SELECTORS["email"])
    if not el:
        return False, "email not found"
    el.clear()
    el.send_keys(email)

    safe_find(driver, *SELECTORS["password"]).send_keys(PASSWORD)
    safe_find(driver, *SELECTORS["confirm"]).send_keys(PASSWORD)

    # ‚úÖ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–≥–∏–æ–Ω
    reg = safe_find(driver, *SELECTORS["region_div"])
    if reg:
        select_second_last_option(driver, reg)

    # –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    cat = safe_find(driver, *SELECTORS["category_div"])
    if cat:
        click_option_in_dropdown(driver, cat, CATEGORY_TEXT)

    # 1Ô∏è‚É£ –ù–∞–∂–∏–º–∞–µ–º "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
    btn = safe_find(driver, *SELECTORS["submit_btn"])
    if btn:
        driver.execute_script("arguments[0].scrollIntoView(true);", btn)
        time.sleep(0.3)
        btn.click()
        print("‚û°Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'")
    else:
        return False, "–ö–Ω–æ–ø–∫–∞ '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    # 2Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    try:
        confirm_btn = WebDriverWait(driver, 6).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å') or contains(., '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')]"))
        )
        confirm_btn.click()
        print("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'")
    except TimeoutException:
        print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ")

    # ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    try:
        error_el = WebDriverWait(driver, 3).until(
            EC.presence_of_element_located((By.XPATH, "//p[contains(text(), 'Student with this email already exists')]"))
        )
        if error_el:
            print("‚ö†Ô∏è –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–∏–º email")
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
    except TimeoutException:
        pass

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    time.sleep(2)
    if "registration" not in driver.current_url:
        return True, "ok"
    return False, "–æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"


def main():
    excel_path = Path(EXCEL_FILE)
    if not excel_path.exists():
        print("‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:", excel_path)
        sys.exit(1)

    if not excel_path.suffix.lower() in [".xlsx", ".xls"]:
        print("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xlsx/.xls)")
        sys.exit(1)

    df = pd.read_excel(excel_path, engine='openpyxl', dtype=str, header=0)
    df = df.fillna("").map(lambda x: str(x).strip())

    print("üìÑ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:", df.columns.tolist())

    col_iin, col_name = None, None
    for c in df.columns:
        low = str(c).lower().strip()
        if any(x in low for x in ["–∏–∏–Ω", "iin", "–±–∏–Ω", "bin"]):
            col_iin = c
        if any(x in low for x in ["—Ñ–∏–æ", "–Ω–∞–∏–º–µ–Ω", "—Ñ.–∏", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]):
            col_name = c

    if not col_iin or not col_name:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ —Å –ò–ò–ù –∏ –§–ò–û! –ù–∞–π–¥–µ–Ω—ã:", df.columns.tolist())
        sys.exit(1)

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: –ò–ò–ù='{col_iin}', –§–ò–û='{col_name}'")

    driver = start_driver(CHROMEDRIVER_PATH, headless=HEADLESS)

    results = []

    try:
        for i, (_, row) in enumerate(df.iterrows(), start=START_ROW):
            iin = str(row[col_iin]).strip()
            raw_name = str(row[col_name]).strip()

            if iin.endswith(".0"):
                iin = iin[:-2]

            if not iin or iin.lower() in ("nan", "none", "null", ""):
                print(f"[{i}] ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ ‚Äî –ø—É—Å—Ç–æ–π –ò–ò–ù")
                continue

            lastname, firstname, middlename = parse_fio_from_cell(raw_name)
            email = f"{iin}@mail.ru"

            print(f"[{i}] –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º: {iin} ‚Üí {lastname} {firstname} {middlename}")
            success, msg = register_one(driver, lastname, firstname, middlename, email)

            results.append({
                "IIN": iin,
                "Email": email,
                "Password": PASSWORD,
                "Lastname": lastname,
                "Firstname": firstname,
                "Middlename": middlename,
                "Status": "OK" if success else "FAILED",
                "Message": msg
            })
            time.sleep(DELAY)

    finally:
        driver.quit()

        # ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel
        result_path = "generated_accounts.xlsx"
        pd.DataFrame(results).to_excel(result_path, index=False)
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {result_path}")


if __name__ == "__main__":
    main()

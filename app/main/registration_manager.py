import time
import threading
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from .models import UserAccount, AutomationLog

# ====================== –ù–ê–°–¢–†–û–ô–ö–ò ======================
BASE = "https://amlacademy.kz"
REG_URL = BASE + "/finiq/registration"
PHONE = "+77777777878"
ORG = "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –≥–æ—Ä–æ–¥–∞ –ö–µ–Ω—Ç–∞—É"
PASSWORD = "Aa123456"
CATEGORY = "–í–∑—Ä–æ—Å–ª—ã–π, –°—Ç—É–¥–µ–Ω—Ç"

CHROMEDRIVER_PATH = None
DELAY = 0.5
# =======================================================

process_thread = None
stop_requested = False


# -------------------- Selenium helpers --------------------
def start_driver():
    options = webdriver.ChromeOptions()
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-gpu")
    options.add_argument("--lang=ru")
    driver = webdriver.Chrome(options=options)
    driver.implicitly_wait(5)
    return driver


def safe_find(driver, by, selector, timeout=6):
    try:
        return WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((by, selector))
        )
    except TimeoutException:
        return None


def select_second_last_option(driver, dropdown_div, wait=6):
    """–í—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–≥–∏–æ–Ω"""
    try:
        driver.execute_script("arguments[0].scrollIntoView(true);", dropdown_div)
        dropdown_div.click()
        time.sleep(0.5)
        options = WebDriverWait(driver, wait).until(
            EC.presence_of_all_elements_located((By.XPATH, "//li | //div[@role='option']"))
        )
        if len(options) >= 2:
            target = options[-2]
            driver.execute_script("arguments[0].scrollIntoView(true);", target)
            driver.execute_script("arguments[0].click();", target)
            print(f"‚úÖ –†–µ–≥–∏–æ–Ω –≤—ã–±—Ä–∞–Ω: {target.text.strip()}")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
    return False


def select_category(driver, category_text="–í–∑—Ä–æ—Å–ª—ã–π, –°—Ç—É–¥–µ–Ω—Ç"):
    try:
        category_div = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, "category"))
        )
        driver.execute_script("arguments[0].scrollIntoView(true);", category_div)
        category_div.click()

        option = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, f"//li[@role='option' and contains(., '{category_text}')]"))
        )
        driver.execute_script("arguments[0].scrollIntoView(true);", option)
        time.sleep(0.2)
        driver.execute_script("arguments[0].click();", option)

        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: {category_text}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        return False



# -------------------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è --------------------
def log_action(user, stage, success, message=""):
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ AutomationLog"""
    AutomationLog.objects.create(user=user, stage=stage, success=success, message=message)


def register_one(driver, user):
    driver.get(REG_URL)
    time.sleep(1)

    try:
        # --- 1) –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
        fio = user.full_name.split()
        lastname = fio[0] if len(fio) > 0 else ""
        firstname = fio[1] if len(fio) > 1 else ""
        middlename = " ".join(fio[2:]) if len(fio) > 2 else ""

        driver.find_element(By.NAME, "lastname").send_keys(lastname)
        driver.find_element(By.NAME, "firstname").send_keys(firstname)
        driver.find_element(By.NAME, "middlename").send_keys(middlename)
        driver.find_element(By.NAME, "phone").send_keys(PHONE)
        driver.find_element(By.NAME, "organization").send_keys(ORG)
        driver.find_element(By.NAME, "email").send_keys(user.email)
        driver.find_element(By.NAME, "password").send_keys(PASSWORD)
        driver.find_element(By.NAME, "confirmPassword").send_keys(PASSWORD)

        # --- 2) –†–µ–≥–∏–æ–Ω
        region = safe_find(driver, By.ID, "region")
        if region:
            select_second_last_option(driver, region)

        # --- 3) –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û "–í–∑—Ä–æ—Å–ª—ã–π, –°—Ç—É–¥–µ–Ω—Ç")
        if not select_category(driver, CATEGORY):
            user.status = "failed"
            user.has_error = True
            user.message = "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
            user.save()
            return

        # --- 4) –ù–∞–∂–∞—Ç—å "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
        reg_btn = safe_find(driver, By.XPATH, "//button[contains(., '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è') or @type='submit']")
        if not reg_btn:
            user.status = "failed"
            user.has_error = True
            user.message = "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'"
            user.save()
            return

        driver.execute_script("arguments[0].scrollIntoView(true);", reg_btn)
        time.sleep(0.2)
        driver.execute_script("arguments[0].click();", reg_btn)
        print("‚û°Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'")

        # --- 5) –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–æ–¥–∞–ª–∫—É
        try:
            confirm_btn = WebDriverWait(driver, 6).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(., '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å') or contains(., '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')]"))
            )
            time.sleep(0.4)
            driver.execute_script("arguments[0].click();", confirm_btn)
            print("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'")
        except TimeoutException:
            # –º–æ–¥–∞–ª–∫–∞ –º–æ–≥–ª–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—å—Å—è ‚Äî —ç—Ç–æ –æ–∫, –∏–¥—ë–º –¥–∞–ª—å—à–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥—ã
            pass

        # --- 6) –ñ–¥—ë–º –æ–¥–∏–Ω –∏–∑ –∏—Å—Ö–æ–¥–æ–≤:
        #   A) –£—Å–ø–µ—Ö: —Ä–µ–¥–∏—Ä–µ–∫—Ç (—É—Ö–æ–¥–∏—Ç —Å–æ /registration)
        #   B) –£—Å–ø–µ—Ö: —Å–æ–æ–±—â–µ–Ω–∏–µ "Student with this email already exists" (—é–∑–µ—Ä —É–∂–µ –µ—Å—Ç—å)
        #   C) –ò–Ω–∞—á–µ ‚Äî –æ—à–∏–±–∫–∞
        end = time.time() + 10
        already_exists = False
        redirected = False

        while time.time() < end:
            # A) —Ä–µ–¥–∏—Ä–µ–∫—Ç
            if "registration" not in driver.current_url:
                redirected = True
                break

            # B) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                driver.find_element(
                    By.XPATH, "//p[contains(text(), 'Student with this email already exists')]"
                )
                already_exists = True
                break
            except Exception:
                pass

            time.sleep(0.3)

        # --- 7) –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if redirected:
            user.status = "registered"
            user.is_registered = True
            user.has_error = False
            user.message = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (—Ä–µ–¥–∏—Ä–µ–∫—Ç)"
            user.save()
            return

        if already_exists:
            user.status = "registered"
            user.is_registered = True
            user.has_error = False       # <‚Äî –í–ê–ñ–ù–û: —ç—Ç–æ –ù–ï –æ—à–∏–±–∫–∞
            user.message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
            user.save()
            return

        # –µ—Å–ª–∏ —Å—é–¥–∞ –¥–æ—à–ª–∏ ‚Äî –Ω–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞, –Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        user.status = "failed"
        user.is_registered = False
        user.has_error = True
        user.message = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: –Ω–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞, –Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º"
        user.save()

    except Exception as e:
        user.status = "failed"
        user.is_registered = False
        user.has_error = True
        user.message = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
        user.save()



# -------------------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ --------------------
def registration_process():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    global stop_requested
    stop_requested = False
    driver = start_driver()
    users = UserAccount.objects.exclude(status="registered")

    for user in users:
        if stop_requested:
            print("‚è∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break

        print(f"üë§ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é: {user.full_name} ({user.email})")
        register_one(driver, user)
        time.sleep(DELAY)

    driver.quit()
    print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω")


def start_registration():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫"""
    global process_thread, stop_requested
    if process_thread and process_thread.is_alive():
        return False  # —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ

    stop_requested = False
    process_thread = threading.Thread(target=registration_process, daemon=True)
    process_thread.start()
    return True


def stop_registration():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å"""
    global stop_requested
    stop_requested = True
    return True


def get_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    total = UserAccount.objects.count()
    reg = UserAccount.objects.filter(status="registered").count()
    fail = UserAccount.objects.filter(status="failed").count()
    pend = UserAccount.objects.filter(status="pending").count()
    return {
        "total": total,
        "registered": reg,
        "failed": fail,
        "pending": pend,
        "running": process_thread.is_alive() if process_thread else False,
    }

# main/certificate_manager.py
import time
import threading
from pathlib import Path
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

from main.models import UserAccount

# ============ –ù–ê–°–¢–†–û–ô–ö–ò ============
BASE_DIR = Path(__file__).resolve().parent.parent
DOWNLOAD_DIR = BASE_DIR / "downloads"
PASSWORD = "Aa123456"
LOGIN_URL = "https://amlacademy.kz/finiq/login"
DASHBOARD_URL = "https://amlacademy.kz/finiq/dashboard"

SHORT_WAIT = 6
MID_WAIT = 10
DL_WAIT = 40

process_thread = None
stop_requested = False
# ==================================


# ---------- –ù–ê–°–¢–†–û–ô–ö–ê –î–†–ê–ô–í–ï–†–ê ----------
def start_driver():
    options = webdriver.ChromeOptions()
    prefs = {
        "download.prompt_for_download": False,
        "plugins.always_open_pdf_externally": True
    }
    options.add_experimental_option("prefs", prefs)
    options.add_argument("--lang=ru")
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    driver = webdriver.Chrome(options=options)
    driver.implicitly_wait(3)
    return driver


def set_download_dir(driver):
    DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)
    driver.execute_cdp_cmd("Page.setDownloadBehavior", {
        "behavior": "allow",
        "downloadPath": str(DOWNLOAD_DIR.resolve())
    })


def safe_click(driver, xpath, wait=SHORT_WAIT):
    try:
        el = WebDriverWait(driver, wait).until(EC.element_to_be_clickable((By.XPATH, xpath)))
        driver.execute_script("arguments[0].scrollIntoView({block:'center'});", el)
        driver.execute_script("arguments[0].click();", el)
        return True
    except Exception:
        return False


# ---------- –õ–û–ì–ò–ù ----------
def login(driver, email):
    try:
        driver.get(LOGIN_URL)
        WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.XPATH, "//input[@type='email']")))

        driver.find_element(By.XPATH, "//input[@type='email']").send_keys(email)
        driver.find_element(By.XPATH, "//input[@type='password']").send_keys(PASSWORD)

        safe_click(driver, "//button[contains(., '–í–æ–π—Ç–∏')]", wait=SHORT_WAIT)
        WebDriverWait(driver, 15).until(lambda d: DASHBOARD_URL in d.current_url)
        print(f"‚úÖ –í–æ—à—ë–ª: {email}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ {email}: {e}")
        return False


# ---------- –ü–ï–†–ï–•–û–î –ö –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú ----------
def open_results_page(driver):
    try:
        safe_click(driver, "//button[contains(., '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∞–º')]", wait=MID_WAIT)
        safe_click(driver, "//button[contains(., '–ú–æ–∏ —Ç–µ—Å—Ç—ã')]", wait=MID_WAIT)
        res_btn = WebDriverWait(driver, MID_WAIT).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')]"))
        )
        driver.execute_script("arguments[0].click();", res_btn)
        WebDriverWait(driver, MID_WAIT).until(lambda d: "test-results" in d.current_url)
        print("üìÑ –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return False


# ---------- –ü–û–ú–û–©–ù–ò–ö–ò –î–õ–Ø –°–ö–ê–ß–ò–í–ê–ù–ò–Ø ----------
def _wait_new_pdf(save_dir: Path, before_set: set, timeout: int = DL_WAIT):
    end = time.time() + timeout
    while time.time() < end:
        current = set(save_dir.glob("*.pdf"))
        diff = current - before_set
        if diff:
            candidate = max(diff, key=lambda p: p.stat().st_mtime)
            if not candidate.with_suffix(candidate.suffix + ".crdownload").exists():
                return candidate
        time.sleep(0.4)
    return None


def click_get_and_download(driver, label_text: str, save_dir: Path, target_name: str):
    final_path = save_dir / target_name
    before = set(save_dir.glob("*.pdf"))

    try:
        container_xpath = f"//div[contains(@class,'MuiGrid-item')][.//p[contains(normalize-space(.), '{label_text}')]]"
        container = WebDriverWait(driver, MID_WAIT).until(
            EC.presence_of_element_located((By.XPATH, container_xpath))
        )

        get_btn_xpath = ".//button[contains(normalize-space(.), '–ü–æ–ª—É—á–∏—Ç—å')]"
        dl_btn_xpath = ".//button[contains(normalize-space(.), '–°–∫–∞—á–∞—Ç—å')]"

        # –ù–∞–∂–∏–º–∞–µ–º "–ü–æ–ª—É—á–∏—Ç—å"
        get_btns = container.find_elements(By.XPATH, get_btn_xpath)
        if get_btns:
            driver.execute_script("arguments[0].scrollIntoView({block:'center'});", get_btns[0])
            driver.execute_script("arguments[0].click();", get_btns[0])
            print(f"üü¢ –ù–∞–∂–∞–ª '–ü–æ–ª—É—á–∏—Ç—å' –¥–ª—è: {label_text}")
        else:
            print(f"‚ÑπÔ∏è '–ü–æ–ª—É—á–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ —É–∂–µ –Ω–∞–∂–∞—Ç–∞.")

        # –ñ–¥—ë–º –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å"
        btn_dl = None
        for _ in range(60):
            container = driver.find_element(By.XPATH, container_xpath)
            btns = container.find_elements(By.XPATH, dl_btn_xpath)
            if btns:
                btn_dl = btns[0]
                if btn_dl.is_enabled():
                    break
            time.sleep(0.5)

        if not btn_dl:
            print(f"‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª—Å—è –∫–Ω–æ–ø–∫–∏ '–°–∫–∞—á–∞—Ç—å' –¥–ª—è: {label_text}")
            return False

        # –ù–∞–∂–∏–º–∞–µ–º "–°–∫–∞—á–∞—Ç—å"
        driver.execute_script("arguments[0].scrollIntoView({block:'center'});", btn_dl)
        time.sleep(0.4)
        driver.execute_script("arguments[0].click();", btn_dl)
        print(f"‚¨áÔ∏è –ù–∞–∂–∞–ª '–°–∫–∞—á–∞—Ç—å' –¥–ª—è: {label_text}")

        # –ñ–¥—ë–º —Ñ–∞–π–ª
        new_file = _wait_new_pdf(save_dir, before, timeout=DL_WAIT)
        if new_file:
            new_file.rename(final_path)
            print(f"üìÑ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª: {final_path.name}")
            return True
        else:
            print(f"‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ PDF")
            return False

    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {label_text}: {e}")
        return False


# ---------- –°–ö–ê–ß–ò–í–ê–ù–ò–ï –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í ----------
def download_certificate(driver, user):
    set_download_dir(driver)
    try:
        WebDriverWait(driver, MID_WAIT).until(
            EC.presence_of_element_located((By.XPATH, "//p[contains(text(), '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω')]"))
        )
        print("üìú –ù–∞–π–¥–µ–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –Ω–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
        filename = f"{user.iin}_{user.full_name}_–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.pdf"
        success = click_get_and_download(driver, "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω", DOWNLOAD_DIR, filename)

        if success:
            user.is_downloaded = True
            user.message = "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–∫–∞—á–∞–Ω"
        else:
            user.has_error = True
            user.message = "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
        user.save()
    except TimeoutException:
        user.has_error = True
        user.message = "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        user.save()
        print("‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")


# ---------- –í–´–•–û–î ----------
def logout(driver):
    try:
        driver.get(DASHBOARD_URL)
        safe_click(driver, "//button[contains(., '–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')]", wait=SHORT_WAIT)
        time.sleep(1)
    except Exception:
        driver.get(LOGIN_URL)


# ---------- –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–° ----------
def download_process():
    global stop_requested
    stop_requested = False

    processed = 0
    driver = None

    while not stop_requested:
        try:
            # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∫–∞–∂–¥—ã–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not driver or processed % 20 == 0:
                if driver:
                    try:
                        driver.quit()
                    except Exception:
                        pass
                driver = start_driver()
                print("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –±—Ä–∞—É–∑–µ—Ä Selenium")

            users = UserAccount.objects.filter(
                is_tested=True, is_downloaded=False, has_error=False
            )

            if not users.exists():
                print("‚è≥ –ù–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç, –∂–¥—É 60 —Å–µ–∫—É–Ω–¥...")
                time.sleep(60)
                continue

            total = users.count()
            print(f"üì• –ù–∞–π–¥–µ–Ω–æ {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")

            for user in users:
                if stop_requested:
                    print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break

                print(f"\nüë§ {user.full_name} ({user.email})")

                try:
                    if not login(driver, user.email):
                        user.has_error = True
                        user.message = "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞"
                        user.save()
                        continue

                    if open_results_page(driver):
                        download_certificate(driver, user)
                    else:
                        user.has_error = True
                        user.message = "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                        user.save()

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–ª—è {user.email}: {e}")
                    user.has_error = True
                    user.message = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
                    user.save()

                finally:
                    logout(driver)
                    processed += 1
                    time.sleep(1)

            # –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            print("üîÅ –ü—Ä–æ–≤–µ—Ä—è—é —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30)

        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.")
            try:
                if driver:
                    driver.quit()
            except Exception:
                pass
            time.sleep(10)
            driver = start_driver()

    if driver:
        try:
            driver.quit()
        except Exception:
            pass
    print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω")



# ---------- –£–ü–†–ê–í–õ–ï–ù–ò–ï ----------
def start_downloading():
    global process_thread, stop_requested
    if process_thread and process_thread.is_alive():
        print("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return False

    stop_requested = False
    process_thread = threading.Thread(target=download_process, daemon=True)
    process_thread.start()
    return True


def stop_downloading():
    global stop_requested
    stop_requested = True
    print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é")
    return True


def get_status():
    total = UserAccount.objects.filter(is_tested=True).count()
    downloaded = UserAccount.objects.filter(is_downloaded=True).count()
    running = process_thread.is_alive() if process_thread else False
    return {
        "total": total,
        "downloaded": downloaded,
        "running": running,
    }
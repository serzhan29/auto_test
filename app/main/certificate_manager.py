import time
import threading
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from django.db import transaction
from main.models import UserAccount

# ============ –ù–ê–°–¢–†–û–ô–ö–ò ============
BASE_DIR = Path(__file__).resolve().parent.parent
DOWNLOAD_DIR = BASE_DIR / "downloads"
PASSWORD = "Aa123456"
LOGIN_URL = "https://amlacademy.kz/finiq/login"
DASHBOARD_URL = "https://amlacademy.kz/finiq/dashboard"
SHORT_WAIT = 6
MID_WAIT = 10
DL_WAIT = 40
MAX_THREADS = 3  # üëà –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 3 –±—Ä–∞—É–∑–µ—Ä–∞

process_thread = None
stop_requested = False
# ==================================


# ---------- –ù–ê–°–¢–†–û–ô–ö–ê –î–†–ê–ô–í–ï–†–ê ----------
def start_driver(download_path: Path):
    options = webdriver.ChromeOptions()
    prefs = {
        "download.default_directory": str(download_path.resolve()),
        "download.prompt_for_download": False,
        "plugins.always_open_pdf_externally": True,
    }
    options.add_experimental_option("prefs", prefs)

    # üëá –í–°–Å –ß–¢–û –ù–£–ñ–ù–û –î–õ–Ø –¢–ò–•–û–ì–û –†–ï–ñ–ò–ú–ê
    options.add_argument("--headless=new")          # –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç—ã–π –±—Ä–∞—É–∑–µ—Ä
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-gpu")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-software-rasterizer")
    options.add_argument("--window-size=1920,1080") # –≤–∞–∂–Ω–æ –¥–ª—è headless
    options.add_argument("--log-level=3")           # —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
    options.add_argument("--lang=ru")
    options.add_argument("--hide-scrollbars")
    options.add_argument("--mute-audio")
    options.add_argument("--disable-infobars")
    options.add_argument("--disable-extensions")
    options.add_argument("--disable-notifications")

    driver = webdriver.Chrome(options=options)
    driver.implicitly_wait(3)

    # üëá –†–∞–∑—Ä–µ—à–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF –≤ headless
    driver.execute_cdp_cmd("Page.setDownloadBehavior", {
        "behavior": "allow",
        "downloadPath": str(download_path.resolve())
    })

    return driver



def safe_click(driver, xpath, wait=SHORT_WAIT):
    try:
        el = WebDriverWait(driver, wait).until(EC.element_to_be_clickable((By.XPATH, xpath)))
        driver.execute_script("arguments[0].scrollIntoView({block:'center'});", el)
        driver.execute_script("arguments[0].click();", el)
        return True
    except Exception:
        return False


# ---------- –õ–û–ì–ò–ù ----------
def login(driver, email):
    try:
        driver.get(LOGIN_URL)
        WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.XPATH, "//input[@type='email']")))
        driver.find_element(By.XPATH, "//input[@type='email']").send_keys(email)
        driver.find_element(By.XPATH, "//input[@type='password']").send_keys(PASSWORD)
        safe_click(driver, "//button[contains(., '–í–æ–π—Ç–∏')]", wait=SHORT_WAIT)
        WebDriverWait(driver, 15).until(lambda d: DASHBOARD_URL in d.current_url)
        print(f"‚úÖ –í–æ—à—ë–ª: {email}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ {email}: {e}")
        return False


def open_results_page(driver):
    try:
        safe_click(driver, "//button[contains(., '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∞–º')]", wait=MID_WAIT)
        safe_click(driver, "//button[contains(., '–ú–æ–∏ —Ç–µ—Å—Ç—ã')]", wait=MID_WAIT)
        res_btn = WebDriverWait(driver, MID_WAIT).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(., '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')]"))
        )
        driver.execute_script("arguments[0].click();", res_btn)
        WebDriverWait(driver, MID_WAIT).until(lambda d: "test-results" in d.current_url)
        print("üìÑ –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return False


def _wait_new_pdf(save_dir: Path, before_set: set, timeout: int = DL_WAIT):
    end = time.time() + timeout
    while time.time() < end:
        current = set(save_dir.glob("*.pdf"))
        diff = current - before_set
        if diff:
            candidate = max(diff, key=lambda p: p.stat().st_mtime)
            # –∂–¥—ë–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            if not candidate.with_suffix(candidate.suffix + ".crdownload").exists():
                return candidate
        time.sleep(0.4)
    return None


def click_get_and_download(driver, label_text: str, save_dir: Path, target_name: str):
    final_path = save_dir / target_name
    before = set(save_dir.glob("*.pdf"))

    try:
        container_xpath = f"//div[contains(@class,'MuiGrid-item')][.//p[contains(normalize-space(.), '{label_text}')]]"
        container = WebDriverWait(driver, MID_WAIT).until(
            EC.presence_of_element_located((By.XPATH, container_xpath))
        )

        get_btn_xpath = ".//button[contains(normalize-space(.), '–ü–æ–ª—É—á–∏—Ç—å')]"
        dl_btn_xpath = ".//button[contains(normalize-space(.), '–°–∫–∞—á–∞—Ç—å')]"

        get_btns = container.find_elements(By.XPATH, get_btn_xpath)
        if get_btns:
            driver.execute_script("arguments[0].click();", get_btns[0])
            print(f"üü¢ –ù–∞–∂–∞–ª '–ü–æ–ª—É—á–∏—Ç—å' –¥–ª—è: {label_text}")
        else:
            print(f"‚ÑπÔ∏è '–ü–æ–ª—É—á–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

        btn_dl = None
        for _ in range(60):
            container = driver.find_element(By.XPATH, container_xpath)
            btns = container.find_elements(By.XPATH, dl_btn_xpath)
            if btns:
                btn_dl = btns[0]
                if btn_dl.is_enabled():
                    break
            time.sleep(0.5)

        if not btn_dl:
            print(f"‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª—Å—è –∫–Ω–æ–ø–∫–∏ '–°–∫–∞—á–∞—Ç—å' –¥–ª—è: {label_text}")
            return False

        driver.execute_script("arguments[0].click();", btn_dl)
        print(f"‚¨áÔ∏è –ù–∞–∂–∞–ª '–°–∫–∞—á–∞—Ç—å' –¥–ª—è: {label_text}")

        new_file = _wait_new_pdf(save_dir, before, timeout=DL_WAIT)
        if new_file:
            new_file.rename(final_path)
            print(f"üìÑ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª: {final_path.name}")
            return True
        else:
            print("‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ PDF")
            return False

    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {label_text}: {e}")
        return False


def download_certificate(user):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –≤ –æ–±—â—É—é –ø–∞–ø–∫—É)"""
    DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)
    driver = start_driver(DOWNLOAD_DIR)

    try:
        if not login(driver, user.email):
            user.has_error = True
            user.message = "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞"
            user.save()
            return

        if not open_results_page(driver):
            user.has_error = True
            user.message = "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            user.save()
            return

        WebDriverWait(driver, MID_WAIT).until(
            EC.presence_of_element_located((By.XPATH, "//p[contains(text(), '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω')]"))
        )
        filename = f"{user.iin}_{user.full_name}_–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.pdf"
        success = click_get_and_download(driver, "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω", DOWNLOAD_DIR, filename)

        if success:
            user.is_downloaded = True
            user.message = "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–∫–∞—á–∞–Ω"
        else:
            user.has_error = True
            user.message = "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
        user.save()

    except TimeoutException:
        user.has_error = True
        user.message = "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        user.save()
        print(f"‚ö†Ô∏è {user.email} ‚Äî —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        user.has_error = True
        user.message = f"–û—à–∏–±–∫–∞: {e}"
        user.save()
        print(f"‚ùå {user.email} ‚Äî –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    finally:
        driver.quit()



# ---------- –û–°–ù–û–í–ù–û–ô –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–´–ô –ü–†–û–¶–ï–°–° ----------
def download_process_parallel():
    global stop_requested
    stop_requested = False

    users = list(UserAccount.objects.filter(is_tested=True, is_downloaded=False, has_error=False))
    if not users:
        print("‚è≥ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        return

    print(f"üì• –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)

    with ThreadPoolExecutor(max_workers=MAX_THREADS) as executor:
        futures = {executor.submit(download_certificate, user): user for user in users}

        for future in as_completed(futures):
            if stop_requested:
                print("‚èπ –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            user = futures[future]
            try:
                future.result()
            except Exception as e:
                print(f"üí• –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞ {user.email}: {e}")

    print("‚úÖ –í—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")


# ---------- –£–ü–†–ê–í–õ–ï–ù–ò–ï ----------
def start_downloading():
    global process_thread, stop_requested
    if process_thread and process_thread.is_alive():
        print("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return False

    stop_requested = False
    process_thread = threading.Thread(target=download_process_parallel, daemon=True)
    process_thread.start()
    return True


def stop_downloading():
    global stop_requested
    stop_requested = True
    print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é")
    return True


def get_status():
    total = UserAccount.objects.filter(is_tested=True).count()
    downloaded = UserAccount.objects.filter(is_downloaded=True).count()
    running = process_thread.is_alive() if process_thread else False
    return {
        "total": total,
        "downloaded": downloaded,
        "running": running,
    }
